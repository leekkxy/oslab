实验目的
熟悉hit-oslab实验环境；
建立对操作系统引导过程的深入认识；
掌握操作系统的基本开发过程；
能对操作系统代码进行简单的控制，揭开操作系统的神秘面纱。
实验内容
此次实验的基本内容是：

阅读《Linux内核完全注释》的第6章，对计算机和Linux 0.11的引导过程进行初步的了解；
按照下面的要求改写0.11的引导程序bootsect.s
有兴趣同学可以做做进入保护模式前的设置程序setup.s。
改写bootsect.s主要完成如下功能：

bootsect.s能在屏幕上打印一段提示信息“XXX is booting...”，其中XXX是你给自己的操作系统起的名字，例如LZJos、Sunix等（可以上论坛上秀秀谁的OS名字最帅，也可以显示一个特色logo，以表示自己操作系统的与众不同。）
改写setup.s主要完成如下功能：

bootsect.s能完成setup.s的载入，并跳转到setup.s开始地址执行。而setup.s向屏幕输出一行"Now we are in SETUP"。
setup.s能获取至少一个基本的硬件参数（如内存参数、显卡参数、硬盘参数等），将其存放在内存的特定地址，并输出到屏幕上。
setup.s不再加载Linux内核，保持上述信息显示在屏幕上即可。
实验报告
在实验报告中回答如下问题：

有时，继承传统意味着别手蹩脚。x86计算机为了向下兼容，导致启动过程比较复杂。请找出x86计算机启动过程中，被硬件强制，软件必须遵守的两个“多此一举”的步骤（多找几个也无妨），说说它们为什么多此一举，并设计更简洁的替代方案。 评分标准[编辑]

bootsect显示正确，30%

bootsect正确读入setup，10%
setup获取硬件参数正确，20%
setup正确显示硬件参数，20%
实验报告，20%